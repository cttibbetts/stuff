(function() {
  var PathExpander, fs, os, path, _;

  fs = require('fs-plus');

  path = require('path');

  os = require('os');

  _ = require('underscore-plus');

  module.exports = PathExpander = (function() {
    function PathExpander(env) {
      this.env = env;
    }

    PathExpander.prototype.expand = function(p, gopath) {
      var pathItem, paths, result, _i, _len;
      if (!((p != null) && p.trim() !== '')) {
        return '';
      }
      if (p.indexOf(path.delimiter) === -1) {
        return this.expandItem(p, gopath);
      }
      paths = p.split(path.delimiter);
      result = '';
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        pathItem = paths[_i];
        pathItem = this.expandItem(pathItem, gopath);
        result = result === '' ? pathItem : result + path.delimiter + pathItem;
      }
      return result;
    };

    PathExpander.prototype.expandItem = function(p, gopath) {
      var goroot, home;
      if (!((p != null) && p.trim() !== '')) {
        return '';
      }
      p = this.replaceGoPathToken(p, gopath);
      switch (os.platform()) {
        case 'darwin':
        case 'freebsd':
        case 'linux':
        case 'sunos':
          if (p.indexOf('~') !== -1) {
            home = this.env.HOME || this.env.HOMEPATH || this.env.USERPROFILE;
            p = p.replace(/~/i, home);
          }
          if (p.toUpperCase().indexOf('$HOME') !== -1) {
            home = this.env.HOME || this.env.HOMEPATH || this.env.USERPROFILE;
            p = p.replace(/\$HOME/i, home);
          }
          if (p.toUpperCase().indexOf('$GOROOT') !== -1) {
            goroot = this.env.GOROOT;
            if ((goroot != null) && goroot !== '') {
              p = p.replace(/\$GOROOT/i, goroot);
            }
          }
          break;
        case 'win32':
          if (p.indexOf('~') !== -1) {
            home = this.env.USERPROFILE;
            p = p.replace(/~/i, home);
          }
          if (p.toUpperCase().indexOf('%HOME%') !== -1) {
            home = this.env.HOME || this.env.HOMEPATH || this.env.USERPROFILE;
            p = p.replace(/%HOME%/i, home);
          }
          if (p.toUpperCase().indexOf('%USERPROFILE%') !== -1) {
            home = this.env.USERPROFILE || this.env.HOME || this.env.HOMEPATH;
            p = p.replace(/%USERPROFILE%/i, home);
          }
          if (p.toUpperCase().indexOf('%HOMEPATH%') !== -1) {
            home = this.env.HOMEPATH || this.env.HOME || this.env.USERPROFILE;
            p = p.replace(/%HOMEPATH%/i, home);
          }
          if (p.toUpperCase().indexOf('%GOROOT%') !== -1) {
            goroot = this.env.GOROOT;
            if ((goroot != null) && goroot !== '') {
              p = p.replace(/%GOROOT%/i, goroot);
            }
          }
      }
      return this.resolveAndNormalize(p);
    };

    PathExpander.prototype.replaceGoPathToken = function(p, gopath) {
      if (!((gopath != null) && gopath !== '')) {
        return p;
      }
      gopath = gopath.indexOf(path.delimiter) === -1 ? gopath.trim() : gopath.split(path.delimiter)[0].trim();
      p = p.replace(/^\$GOPATH/i, gopath.trim() + '/');
      p = p.replace(/^%GOPATH%/i, gopath.trim());
      if ((p == null) || p.trim() === '') {
        return '';
      }
      return p.trim();
    };

    PathExpander.prototype.resolveAndNormalize = function(p) {
      var result;
      if (!((p != null) && p.trim() !== '')) {
        return '';
      }
      result = path.resolve(path.normalize(p));
      return result;
    };

    return PathExpander;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvdmFncmFudC8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL2xpYi91dGlsL3BhdGhleHBhbmRlci5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsNkJBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBQSxDQUFRLFNBQVIsQ0FBTCxDQUFBOztBQUFBLEVBQ0EsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBRFAsQ0FBQTs7QUFBQSxFQUVBLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQUZMLENBQUE7O0FBQUEsRUFHQSxDQUFBLEdBQUksT0FBQSxDQUFRLGlCQUFSLENBSEosQ0FBQTs7QUFBQSxFQUtBLE1BQU0sQ0FBQyxPQUFQLEdBQ007QUFDUyxJQUFBLHNCQUFDLEdBQUQsR0FBQTtBQUNYLE1BQUEsSUFBQyxDQUFBLEdBQUQsR0FBTyxHQUFQLENBRFc7SUFBQSxDQUFiOztBQUFBLDJCQUdBLE1BQUEsR0FBUSxTQUFDLENBQUQsRUFBSSxNQUFKLEdBQUE7QUFDTixVQUFBLGlDQUFBO0FBQUEsTUFBQSxJQUFBLENBQUEsQ0FBaUIsV0FBQSxJQUFPLENBQUMsQ0FBQyxJQUFGLENBQUEsQ0FBQSxLQUFjLEVBQXRDLENBQUE7QUFBQSxlQUFPLEVBQVAsQ0FBQTtPQUFBO0FBQ0EsTUFBQSxJQUFpQyxDQUFDLENBQUMsT0FBRixDQUFVLElBQUksQ0FBQyxTQUFmLENBQUEsS0FBNkIsQ0FBQSxDQUE5RDtBQUFBLGVBQU8sSUFBQyxDQUFBLFVBQUQsQ0FBWSxDQUFaLEVBQWUsTUFBZixDQUFQLENBQUE7T0FEQTtBQUFBLE1BRUEsS0FBQSxHQUFRLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBSSxDQUFDLFNBQWIsQ0FGUixDQUFBO0FBQUEsTUFHQSxNQUFBLEdBQVMsRUFIVCxDQUFBO0FBSUEsV0FBQSw0Q0FBQTs2QkFB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

//# sourceURL=/home/vagrant/.atom/packages/go-plus/lib/util/pathexpander.coffee
