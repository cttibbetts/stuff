(function() {
  var AtomConfig, Environment, GoExecutable, fs, os, path, temp, _;

  path = require('path');

  fs = require('fs-plus');

  os = require('os');

  temp = require('temp').track();

  _ = require('underscore-plus');

  GoExecutable = require('./../lib/goexecutable');

  Environment = require('./../lib/environment');

  AtomConfig = require('./util/atomconfig');

  describe('go executable', function() {
    var directory, env, environment, go, goexecutable, _ref;
    _ref = [], environment = _ref[0], goexecutable = _ref[1], directory = _ref[2], env = _ref[3], go = _ref[4];
    beforeEach(function() {
      return runs(function() {
        var atomconfig;
        atomconfig = new AtomConfig();
        atomconfig.defaults();
        environment = new Environment(process.env);
        directory = temp.mkdirSync();
        env = environment.Clone();
        return env['GOPATH'] = directory;
      });
    });
    describe('when there is a symlink to a directory called go in a directory in the path', function() {
      var pathDirectory;
      pathDirectory = [][0];
      beforeEach(function() {
        runs(function() {
          pathDirectory = temp.mkdirSync();
          fs.mkdirSync(path.join(pathDirectory, 'bin'));
          fs.mkdirSync(path.join(pathDirectory, 'otherbin'));
          fs.mkdirSync(path.join(pathDirectory, 'otherbin', 'go'));
          fs.mkdirSync(path.join(pathDirectory, 'go'));
          fs.symlinkSync(path.join(pathDirectory, 'go'), path.join(pathDirectory, 'bin', 'go'));
          env['PATH'] = env['PATH'] + path.delimiter + path.join(pathDirectory, 'bin') + path.delimiter + path.join(pathDirectory, 'otherbin');
          return goexecutable = new GoExecutable(env);
        });
        return waitsForPromise(function() {
          return goexecutable.detect().then(function(gos) {
            return go = goexecutable.current();
          });
        });
      });
      return it('chooses the correct go', function() {
        expect(goexecutable).toBeDefined();
        expect(go).toBeDefined();
        return expect(go).toBeTruthy();
      });
    });
    describe('when the GOPATH is empty', function() {
      beforeEach(function() {
        runs(function() {
          env['GOPATH'] = '';
          atom.config.set('go-plus.goPath', '');
          return goexecutable = new GoExecutable(env);
        });
        return waitsForPromise(function() {
          return goexecutable.detect().then(function(gos) {
            return go = goexecutable.current();
          });
        });
      });
      return it('finds tools if they are on the PATH but not in the GOPATH', function() {
        var done;
        done = false;
        expect(goexecutable).toBeDefined();
        expect(go).toBeDefined();
        expect(go).toBeTruthy();
        expect(go.gopath).toBe('');
        expect(go.goimports()).not.toBe(false);
        return expect(go.golint()).not.toBe(false);
      });
    });
    describe('when the GOPATH and PATH are empty', function() {
      beforeEach(function() {
        runs(function() {
          env['GOPATH'] = '';
          atom.config.set('go-plus.goPath', '');
          if (os.platform() === 'win32') {
            env['Path'] = '';
          } else {
            env['PATH'] = '';
          }
          return goexecutable = new GoExecutable(env);
        });
        return waitsForPromise(function() {
          return goexecutable.detect().then(function(gos) {
            return go = goexecutable.current();
          });
        });
      });
      return it('skips fetching tools if GOPATH is empty', function() {
        var done;
        done = false;
        expect(goexecutable).toBeDefined();
        expect(go).toBeDefined();
        expect(go).toBeTruthy();
        expect(go.gopath).toBe('');
        expect(go.goimports()).toBe(false);
        expect(go.golint()).toBe(false);
        goexecutable.once('gettools-complete', function() {
          go = goexecutable.current();
          expect(go).toBeDefined();
          expect(go).toBeTruthy();
          expect(go.gopath).toBe('');
          expect(go.goimports()).toBe(false);
          expect(go.golint()).toBe(false);
          return done = true;
        });
        goexecutable.gettools(go, true);
        return waitsFor(function() {
          return done === true;
        });
      });
    });
    return describe('when user has the go executable in their path', function() {
      beforeEach(function() {
        runs(function() {
          return goexecutable = new GoExecutable(env);
        });
        return waitsForPromise(function() {
          return goexecutable.detect().then(function(gos) {
            return go = goexecutable.current();
          });
        });
      });
      it('determines the current go version', function() {
        return runs(function() {
          expect(goexecutable).toBeDefined();
          expect(go).toBeDefined();
          expect(go).toBeTruthy();
          if (go.version !== 'devel') {
            expect(go.name.substring(0, 2)).toBe('go');
          }
          if (go.version !== 'devel') {
            expect(go.version.substring(0, 2)).toBe('go');
          }
          if (go.version !== 'devel') {
            expect(go.arch).toBe('amd64');
          }
          if (os.platform() === 'win32') {
            return expect(go.executable.substring(go.executable.length - 6, go.executable.length)).toBe('go.exe');
          } else {
            return expect(go.executable.substring(go.executable.length - 2, go.executable.length)).toBe('go');
          }
        });
      });
      return xit('fetches missing tools if requested', function() {
        var done;
        done = false;
        runs(function() {
          var suffix;
          suffix = os.platform() === 'win32' ? '.exe' : '';
          expect(goexecutable).toBeDefined();
          expect(go).toBeDefined();
          expect(go).toBeTruthy();
          expect(go.gopath).toBe(directory);
          expect(go.goimports()).toBe(false);
          expect(go.goreturns()).toBe(false);
          expect(go.golint()).toBe(false);
          expect(go.oracle()).toBe(false);
          goexecutable.once('gettools-complete', function() {
            go = goexecutable.current();
            expect(go).toBeDefined();
            expect(go).toBeTruthy();
            expect(go.gopath).toBe(directory);
            expect(go.goimports()).toBe(fs.realpathSync(path.join(directory, 'bin', 'goimports' + suffix)));
            expect(go.goreturns()).toBe(false);
            expect(go.golint()).toBe(fs.realpathSync(path.join(directory, 'bin', 'golint' + suffix)));
            expect(go.oracle()).toBe(path.join(directory, 'bin', 'oracle' + suffix));
            return done = true;
          });
          return goexecutable.gettools(go, true);
        });
        waitsFor(function() {
          return done === true;
        }, 60000);
        runs(function() {
          var suffix;
          suffix = os.platform() === 'win32' ? '.exe' : '';
          expect(goexecutable).toBeDefined();
          expect(go).toBeDefined();
          expect(go).toBeTruthy();
          expect(go.gopath).toBe(directory);
          expect(go.goimports()).not.toBe(false);
          expect(go.goreturns()).toBe(false);
          expect(go.golint()).not.toBe(false);
          expect(go.oracle()).toBe(false);
          goexecutable.once('gettools-complete', function() {
            go = goexecutable.current();
            expect(go).toBeDefined();
            expect(go).toBeTruthy();
            expect(go.gopath).toBe(directory);
            expect(go.goimports()).toBe(fs.realpathSync(path.join(directory, 'bin', 'goimports' + suffix)));
            expect(go.goreturns()).toBe(fs.realpathSync(path.join(directory, 'bin', 'goreturns' + suffix)));
            expect(go.golint()).toBe(fs.realpathSync(path.join(directory, 'bin', 'golint' + suffix)));
            expect(go.oracle()).toBe(path.join(directory, 'bin', 'oracle' + suffix));
            return done = true;
          });
          return goexecutable.gettools(go, true);
        });
        return waitsFor(function() {
          return done === true;
        }, 60000);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvdmFncmFudC8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL3NwZWMvZ29leGVjdXRhYmxlLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDREQUFBOztBQUFBLEVBQUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBQVAsQ0FBQTs7QUFBQSxFQUNBLEVBQUEsR0FBSyxPQUFBLENBQVEsU0FBUixDQURMLENBQUE7O0FBQUEsRUFFQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLEVBR0EsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBQWUsQ0FBQyxLQUFoQixDQUFBLENBSFAsQ0FBQTs7QUFBQSxFQUlBLENBQUEsR0FBSSxPQUFBLENBQVEsaUJBQVIsQ0FKSixDQUFBOztBQUFBLEVBS0EsWUFBQSxHQUFlLE9BQUEsQ0FBUSx1QkFBUixDQUxmLENBQUE7O0FBQUEsRUFNQSxXQUFBLEdBQWMsT0FBQSxDQUFRLHNCQUFSLENBTmQsQ0FBQTs7QUFBQSxFQU9BLFVBQUEsR0FBYSxPQUFBLENBQVEsbUJBQVIsQ0FQYixDQUFBOztBQUFBLEVBU0EsUUFBQSxDQUFTLGVBQVQsRUFBMEIsU0FBQSxHQUFBO0FBQ3hCLFFBQUEsbURBQUE7QUFBQSxJQUFBLE9BQWtELEVBQWxELEVBQUMscUJBQUQsRUFBYyxzQkFBZCxFQUE0QixtQkFBNUIsRUFBdUMsYUFBdkMsRUFBNEMsWUFBNUMsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTthQUNULElBQUEsQ0FBSyxTQUFBLEdBQUE7QUFDSCxZQUFBLFVBQUE7QUFBQSxRQUFBLFVBQUEsR0FBaUIsSUFBQSxVQUFBLENBQUEsQ0FBakIsQ0FBQTtBQUFBLFFBQ0EsVUFBVSxDQUFDLFFBQVgsQ0FBQSxDQURBLENBQUE7QUFBQSxRQUVB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

//# sourceURL=/home/vagrant/.atom/packages/go-plus/spec/goexecutable-spec.coffee
