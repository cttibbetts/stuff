(function() {
  var Environment, Executor, GoExecutable, GocoverParser, fs, os, path, temp, _;

  path = require('path');

  fs = require('fs-plus');

  temp = require('temp').track();

  os = require('os');

  _ = require('underscore-plus');

  GoExecutable = require('./../../lib/goexecutable');

  GocoverParser = require('./../../lib/gocover/gocover-parser');

  Environment = require('./../../lib/environment');

  Executor = require('./../../lib/executor');

  describe('gocover parser', function() {
    var directory, done, env, environment, executor, filePath, go, gocoverparser, goexecutable, testFilePath, _ref;
    _ref = [], done = _ref[0], gocoverparser = _ref[1], environment = _ref[2], executor = _ref[3], goexecutable = _ref[4], go = _ref[5], env = _ref[6], directory = _ref[7], filePath = _ref[8], testFilePath = _ref[9];
    beforeEach(function() {
      done = false;
      environment = new Environment(process.env);
      executor = new Executor(environment.Clone());
      gocoverparser = new GocoverParser();
      directory = temp.mkdirSync();
      env = _.clone(process.env);
      env['GOPATH'] = directory;
      goexecutable = new GoExecutable(env);
      filePath = path.join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus.go');
      testFilePath = path.join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus_test.go');
      fs.writeFileSync(filePath, 'package main\n\nimport "fmt"\n\nfunc main()  {\n\tfmt.Println(Hello())\n}\n\nfunc Hello() string {\n\treturn "Hello, 世界"\n}\n');
      fs.writeFileSync(testFilePath, 'package main\n\nimport "testing"\n\nfunc TestHello(t *testing.T) {\n\tresult := Hello()\n\tif result != "Hello, 世界" {\n\t\tt.Errorf("Expected %s - got %s", "Hello, 世界", result)\n\t}\n}');
      return waitsForPromise(function() {
        return goexecutable.detect().then(function(gos) {
          return go = goexecutable.current();
        });
      });
    });
    return it('parses the file for a single package correctly', function() {
      var args, cmd, cwd, tempDir, tempFile;
      done = false;
      cmd = go.executable;
      tempDir = temp.mkdirSync();
      tempFile = path.join(tempDir, 'coverage.out');
      args = ['test', "-coverprofile=" + tempFile];
      cwd = path.join(directory, 'src', 'github.com', 'testuser', 'example');
      done = function(exitcode, stdout, stderr, messages) {
        expect(exitcode).toBe(0);
        if (exitcode === 0) {
          gocoverparser.setDataFile(tempFile);
          return done = true;
        }
      };
      runs(function() {
        return executor.exec(cmd, cwd, env, done, args);
      });
      waitsFor(function() {
        return done === true;
      });
      return runs(function() {
        var packagePath, re, result, retext;
        retext = '^' + path.join(directory, 'src') + path.sep;
        if (os.platform() === 'win32') {
          retext = retext.replace(/\\/g, '\\\\');
        }
        re = new RegExp(retext);
        packagePath = filePath.replace(re, '');
        result = gocoverparser.rangesForFile(filePath);
        expect(result).toBeDefined();
        expect(_.size(result)).toBe(2);
        expect(result[0]).toBeDefined();
        expect(result[0].range.start).toBeDefined();
        expect(result[0].range.end).toBeDefined();
        expect(result[0].range.start.column).toBe(13);
        expect(result[0].range.start.row).toBe(4);
        expect(result[0].range.end.column).toBe(1);
        expect(result[0].range.end.row).toBe(6);
        expect(result[0].count).toBe(0);
        expect(result[0].file).toBe(packagePath);
        expect(result[1]).toBeDefined();
        expect(result[1].range.start).toBeDefined();
        expect(result[1].range.end).toBeDefined();
        expect(result[1].range.start.column).toBe(20);
        expect(result[1].range.start.row).toBe(8);
        expect(result[1].range.end.column).toBe(1);
        expect(result[1].range.end.row).toBe(10);
        expect(result[1].count).toBe(1);
        return expect(result[1].file).toBe(packagePath);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvdmFncmFudC8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL3NwZWMvZ29jb3Zlci9nb2NvdmVyLXBhcnNlci1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSx5RUFBQTs7QUFBQSxFQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUFQLENBQUE7O0FBQUEsRUFDQSxFQUFBLEdBQUssT0FBQSxDQUFRLFNBQVIsQ0FETCxDQUFBOztBQUFBLEVBRUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBQWUsQ0FBQyxLQUFoQixDQUFBLENBRlAsQ0FBQTs7QUFBQSxFQUdBLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQUhMLENBQUE7O0FBQUEsRUFJQSxDQUFBLEdBQUksT0FBQSxDQUFRLGlCQUFSLENBSkosQ0FBQTs7QUFBQSxFQUtBLFlBQUEsR0FBZSxPQUFBLENBQVEsMEJBQVIsQ0FMZixDQUFBOztBQUFBLEVBTUEsYUFBQSxHQUFnQixPQUFBLENBQVEsb0NBQVIsQ0FOaEIsQ0FBQTs7QUFBQSxFQU9BLFdBQUEsR0FBYyxPQUFBLENBQVEseUJBQVIsQ0FQZCxDQUFBOztBQUFBLEVBUUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxzQkFBUixDQVJYLENBQUE7O0FBQUEsRUFVQSxRQUFBLENBQVMsZ0JBQVQsRUFBMkIsU0FBQSxHQUFBO0FBQ3pCLFFBQUEsMEdBQUE7QUFBQSxJQUFBLE9BQXlHLEVBQXpHLEVBQUMsY0FBRCxFQUFPLHVCQUFQLEVBQXNCLHFCQUF0QixFQUFtQyxrQkFBbkMsRUFBNkMsc0JBQTdDLEVBQTJELFlBQTNELEVBQStELGFBQS9ELEVBQW9FLG1CQUFwRSxFQUErRSxrQkFBL0UsRUFBeUYsc0JBQXpGLENBQUE7QUFBQSxJQUVBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLElB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

//# sourceURL=/home/vagrant/.atom/packages/go-plus/spec/gocover/gocover-parser-spec.coffee
