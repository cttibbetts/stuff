(function() {
  var AtomConfig, PathHelper, fs, path, temp, _;

  path = require('path');

  fs = require('fs-plus');

  temp = require('temp').track();

  _ = require('underscore-plus');

  PathHelper = require('./util/pathhelper');

  AtomConfig = require('./util/atomconfig');

  describe('gocover', function() {
    var atomconfig, directory, dispatch, editor, filePath, mainModule, oldGoPath, pathhelper, testEditor, testFilePath, _ref;
    _ref = [], mainModule = _ref[0], atomconfig = _ref[1], editor = _ref[2], dispatch = _ref[3], testEditor = _ref[4], directory = _ref[5], filePath = _ref[6], testFilePath = _ref[7], oldGoPath = _ref[8], pathhelper = _ref[9];
    beforeEach(function() {
      atomconfig = new AtomConfig();
      pathhelper = new PathHelper();
      atomconfig.allfunctionalitydisabled();
      directory = temp.mkdirSync();
      oldGoPath = process.env.GOPATH;
      if (process.env.GOPATH == null) {
        oldGoPath = pathhelper.home() + path.sep + 'go';
      }
      process.env['GOPATH'] = directory;
      atom.project.setPaths(directory);
      return jasmine.unspy(window, 'setTimeout');
    });
    afterEach(function() {
      return process.env['GOPATH'] = oldGoPath;
    });
    return describe('when run coverage on save is enabled', function() {
      var ready;
      ready = false;
      beforeEach(function() {
        atom.config.set('go-plus.runCoverageOnSave', true);
        filePath = path.join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus.go');
        testFilePath = path.join(directory, 'src', 'github.com', 'testuser', 'example', 'go-plus_test.go');
        fs.writeFileSync(filePath, '');
        fs.writeFileSync(testFilePath, '');
        waitsForPromise(function() {
          return atom.workspace.open(filePath).then(function(e) {
            return editor = e;
          });
        });
        waitsForPromise(function() {
          return atom.workspace.open(testFilePath).then(function(e) {
            return testEditor = e;
          });
        });
        waitsForPromise(function() {
          return atom.packages.activatePackage('language-go');
        });
        waitsForPromise(function() {
          return atom.packages.activatePackage('go-plus').then(function(g) {
            return mainModule = g.mainModule;
          });
        });
        waitsFor(function() {
          var _ref1;
          return (_ref1 = mainModule.dispatch) != null ? _ref1.ready : void 0;
        });
        return runs(function() {
          return dispatch = mainModule.dispatch;
        });
      });
      return it('displays coverage for go source', function() {
        var buffer, done;
        buffer = [][0];
        done = false;
        runs(function() {
          var testBuffer;
          buffer = editor.getBuffer();
          buffer.setText('package main\n\nimport "fmt"\n\nfunc main()  {\n\tfmt.Println(Hello())\n}\n\nfunc Hello() string {\n\treturn "Hello, 世界"\n}\n');
          testBuffer = testEditor.getBuffer();
          testBuffer.setText('package main\n\nimport "testing"\n\nfunc TestHello(t *testing.T) {\n\tresult := Hello()\n\tif result != "Hello, 世界" {\n\t\tt.Errorf("Expected %s - got %s", "Hello, 世界", result)\n\t}\n}');
          dispatch = atom.packages.getLoadedPackage('go-plus').mainModule.dispatch;
          dispatch.once('coverage-complete', function() {
            expect(dispatch.messages != null).toBe(true);
            expect(_.size(dispatch.messages)).toBe(0);
            dispatch.once('coverage-complete', function() {
              var markers, range;
              expect(dispatch.messages != null).toBe(true);
              expect(_.size(dispatch.messages)).toBe(0);
              markers = buffer.findMarkers({
                "class": 'gocover'
              });
              expect(markers).toBeDefined();
              expect(markers.length).toBe(2);
              expect(markers[0]).toBeDefined();
              range = markers[0].getRange();
              expect(range.start.row).toBe(4);
              expect(range.start.column).toBe(13);
              expect(range.end.row).toBe(6);
              expect(range.end.column).toBe(1);
              expect(markers[1]).toBeDefined();
              range = markers[1].getRange();
              expect(range).toBeDefined();
              expect(range.start.row).toBe(8);
              expect(range.start.column).toBe(20);
              expect(range.end.row).toBe(10);
              expect(range.end.column).toBe(1);
              return done = true;
            });
            return testBuffer.save();
          });
          return buffer.save();
        });
        return waitsFor(function() {
          return done === true;
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvdmFncmFudC8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL3NwZWMvZ29jb3Zlci1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSx5Q0FBQTs7QUFBQSxFQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQUFQLENBQUE7O0FBQUEsRUFDQSxFQUFBLEdBQUssT0FBQSxDQUFRLFNBQVIsQ0FETCxDQUFBOztBQUFBLEVBRUEsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBQWUsQ0FBQyxLQUFoQixDQUFBLENBRlAsQ0FBQTs7QUFBQSxFQUdBLENBQUEsR0FBSSxPQUFBLENBQVEsaUJBQVIsQ0FISixDQUFBOztBQUFBLEVBSUEsVUFBQSxHQUFhLE9BQUEsQ0FBUSxtQkFBUixDQUpiLENBQUE7O0FBQUEsRUFLQSxVQUFBLEdBQWEsT0FBQSxDQUFRLG1CQUFSLENBTGIsQ0FBQTs7QUFBQSxFQU9BLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUEsR0FBQTtBQUNsQixRQUFBLG9IQUFBO0FBQUEsSUFBQSxPQUFtSCxFQUFuSCxFQUFDLG9CQUFELEVBQWEsb0JBQWIsRUFBeUIsZ0JBQXpCLEVBQWlDLGtCQUFqQyxFQUEyQyxvQkFBM0MsRUFBdUQsbUJBQXZELEVBQWtFLGtCQUFsRSxFQUE0RSxzQkFBNUUsRUFBMEYsbUJBQTFGLEVBQXFHLG9CQUFyRyxDQUFBO0FBQUEsSUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsTUFBQSxVQUFBLEdBQWlCLElBQUEsVUFBQSxDQUFBLENBQWpCLENBQUE7QUFBQSxNQUNBLFVBQUEsR0FBaUIsSUFBQSxVQUFBLENBQUEsQ0FEakIsQ0FBQTtBQUFBLE1BRUEsVUFBVSxDQUFDLHdCQUFYLENBQUEsQ0FGQSxDQUFBO0FBQUEsTUFHQSxTQUFBLEdBQVksSUFBSSxDQUFDLFNB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

//# sourceURL=/home/vagrant/.atom/packages/go-plus/spec/gocover-spec.coffee
