(function() {
  var Environment, Go, PathExpander, PathHelper, os, path, _;

  _ = require('underscore-plus');

  path = require('path');

  os = require('os');

  Go = require('./../lib/go');

  PathExpander = require('./../lib/util/pathexpander');

  PathHelper = require('./util/pathhelper');

  Environment = require('./../lib/environment');

  describe('go', function() {
    var env, environment, go, pathexpander, pathhelper, _ref;
    _ref = [], go = _ref[0], environment = _ref[1], pathexpander = _ref[2], pathhelper = _ref[3], env = _ref[4];
    beforeEach(function() {
      environment = new Environment(process.env);
      pathexpander = new PathExpander(environment.Clone());
      pathhelper = new PathHelper();
      return go = new Go('/usr/local/bin/go', pathexpander);
    });
    describe('when working with a single-item gopath', function() {
      beforeEach(function() {
        return go.gopath = pathhelper.home() + path.sep + 'go';
      });
      it('expands the path', function() {
        return runs(function() {
          var result;
          result = go.buildgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(result).toBe(path.join(pathhelper.home(), 'go'));
        });
      });
      return it('splits the path', function() {
        return runs(function() {
          var result;
          result = go.splitgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(1);
          expect(result[0]).toBeDefined();
          return expect(result[0]).toBe(path.join(pathhelper.home(), 'go'));
        });
      });
    });
    return describe('when working with a multi-item gopath', function() {
      beforeEach(function() {
        return go.gopath = pathhelper.home() + path.sep + 'go' + path.delimiter + pathhelper.home() + path.sep + 'go2' + path.delimiter + path.sep + 'usr' + path.sep + 'local' + path.sep + 'go';
      });
      it('expands the path', function() {
        return runs(function() {
          var expected, prefix, result;
          prefix = os.platform() === 'win32' ? 'c:' : '';
          result = go.buildgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expected = path.join(pathhelper.home(), 'go') + path.delimiter + path.join(pathhelper.home(), 'go2') + path.delimiter + prefix + path.sep + 'usr' + path.sep + 'local' + path.sep + 'go';
          return expect(result.toLowerCase()).toBe(expected.toLowerCase());
        });
      });
      return it('splits the path', function() {
        return runs(function() {
          var expected, prefix, result;
          prefix = os.platform() === 'win32' ? 'c:' : '';
          result = go.splitgopath();
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(3);
          expect(result[0]).toBeDefined();
          expect(result[0]).toBe(path.join(pathhelper.home(), 'go'));
          expect(result[1]).toBeDefined();
          expect(result[1]).toBe(path.join(pathhelper.home(), 'go2'));
          expect(result[2]).toBeDefined();
          expected = prefix + path.sep + path.join('usr', 'local', 'go');
          return expect(result[2].toLowerCase()).toBe(expected.toLowerCase());
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvdmFncmFudC8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL3NwZWMvZ28tc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsc0RBQUE7O0FBQUEsRUFBQSxDQUFBLEdBQUksT0FBQSxDQUFRLGlCQUFSLENBQUosQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQURQLENBQUE7O0FBQUEsRUFFQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FGTCxDQUFBOztBQUFBLEVBR0EsRUFBQSxHQUFLLE9BQUEsQ0FBUSxhQUFSLENBSEwsQ0FBQTs7QUFBQSxFQUlBLFlBQUEsR0FBZSxPQUFBLENBQVEsNEJBQVIsQ0FKZixDQUFBOztBQUFBLEVBS0EsVUFBQSxHQUFhLE9BQUEsQ0FBUSxtQkFBUixDQUxiLENBQUE7O0FBQUEsRUFNQSxXQUFBLEdBQWMsT0FBQSxDQUFRLHNCQUFSLENBTmQsQ0FBQTs7QUFBQSxFQVFBLFFBQUEsQ0FBUyxJQUFULEVBQWUsU0FBQSxHQUFBO0FBQ2IsUUFBQSxvREFBQTtBQUFBLElBQUEsT0FBbUQsRUFBbkQsRUFBQyxZQUFELEVBQUsscUJBQUwsRUFBa0Isc0JBQWxCLEVBQWdDLG9CQUFoQyxFQUE0QyxhQUE1QyxDQUFBO0FBQUEsSUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsTUFBQSxXQUFBLEdBQWtCLElBQUEsV0FBQSxDQUFZLE9BQU8sQ0FBQyxHQUFwQixDQUFsQixDQUFBO0FBQUEsTUFDQSxZQUFBLEdBQW1CLElBQUEsWUFBQSxDQUFhLFdBQVcsQ0FBQyxLQUFaLENBQUEsQ0FBYixDQURuQixDQUFBO0FBQUEsTUFFQSxVQUFBLEdBQWlCLElBQUEsVUFBQSxDQUFBLENBRmpCLENBQUE7YUFHQSxFQUFBLEdBQVMsSUFBQSxFQUFBLENBQUcsbUJB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

//# sourceURL=/home/vagrant/.atom/packages/go-plus/spec/go-spec.coffee
