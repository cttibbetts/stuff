(function() {
  var Environment, PathExpander, PathHelper, path, _;

  _ = require('underscore-plus');

  path = require('path');

  PathExpander = require('./../../lib/util/pathexpander');

  PathHelper = require('./pathhelper.coffee');

  Environment = require('./../../lib/environment');

  describe('pathexpander', function() {
    var environment, gopath, pathexpander, pathhelper, _ref;
    _ref = [], environment = _ref[0], pathexpander = _ref[1], pathhelper = _ref[2], gopath = _ref[3];
    beforeEach(function() {
      environment = new Environment(process.env);
      pathexpander = new PathExpander(environment.Clone());
      return pathhelper = new PathHelper();
    });
    describe('when working with a single-item path', function() {
      return it('expands the path', function() {
        return runs(function() {
          var result;
          result = pathexpander.expand(path.join('~', 'go', 'go', '..', 'bin', 'goimports'), '~/go');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
          result = pathexpander.expand(path.join('$GOPATH', 'go', '..', 'bin', 'goimports'), '~/go');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
        });
      });
    });
    return describe('when working with a multi-item path', function() {
      return it('expands the path', function() {
        return runs(function() {
          var result;
          result = pathexpander.expand(path.join('~', 'go', 'go', '..', 'bin', 'goimports'), '~/go' + path.delimiter + '~/othergo');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
          result = pathexpander.expand(path.join('$GOPATH', 'go', '..', 'bin', 'goimports'), '~/go' + path.delimiter + '~/othergo');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(result).toBe(path.join(pathhelper.home(), 'go', 'bin', 'goimports'));
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvdmFncmFudC8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL3NwZWMvdXRpbC9wYXRoZXhwYW5kZXItc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsOENBQUE7O0FBQUEsRUFBQSxDQUFBLEdBQUksT0FBQSxDQUFRLGlCQUFSLENBQUosQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQURQLENBQUE7O0FBQUEsRUFFQSxZQUFBLEdBQWUsT0FBQSxDQUFRLCtCQUFSLENBRmYsQ0FBQTs7QUFBQSxFQUdBLFVBQUEsR0FBYSxPQUFBLENBQVEscUJBQVIsQ0FIYixDQUFBOztBQUFBLEVBSUEsV0FBQSxHQUFjLE9BQUEsQ0FBUSx5QkFBUixDQUpkLENBQUE7O0FBQUEsRUFNQSxRQUFBLENBQVMsY0FBVCxFQUF5QixTQUFBLEdBQUE7QUFDdkIsUUFBQSxtREFBQTtBQUFBLElBQUEsT0FBa0QsRUFBbEQsRUFBQyxxQkFBRCxFQUFjLHNCQUFkLEVBQTRCLG9CQUE1QixFQUF3QyxnQkFBeEMsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsV0FBQSxHQUFrQixJQUFBLFdBQUEsQ0FBWSxPQUFPLENBQUMsR0FBcEIsQ0FBbEIsQ0FBQTtBQUFBLE1BQ0EsWUFBQSxHQUFtQixJQUFBLFlBQUEsQ0FBYSxXQUFXLENBQUMsS0FBWixDQUFBLENBQWIsQ0FEbkIsQ0FBQTthQUVBLFVBQUEsR0FBaUIsSUFBQSxVQUFBLENBQUEsRUFIUjtJQUFBLENBQVgsQ0FGQSxDQUFBO0FBQUEsSUFPQSxRQUFBLENBQVMsc0NBQVQsRUFBaUQsU0FBQSxHQUFBO2FBRS9DLEVBQUEsQ0FBRyxrQkFBSCxFQUF1QixTQUFBLEdBQUE7ZUFDckIsSUFBQSxDQUFLLFNBQUEsR0FBQTtBQUNI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

//# sourceURL=/home/vagrant/.atom/packages/go-plus/spec/util/pathexpander-spec.coffee
