(function() {
  var SplicerSplitter, path, _;

  _ = require('underscore-plus');

  path = require('path');

  SplicerSplitter = require('./../../lib/util/splicersplitter');

  describe('splicersplitter', function() {
    var splicersplitter;
    splicersplitter = [][0];
    beforeEach(function() {
      return splicersplitter = new SplicerSplitter();
    });
    describe('when working with space delimeted text', function() {
      it('splits the text into an array', function() {
        return runs(function() {
          var result;
          result = splicersplitter.splitAndSquashToArray(' ', ' -v  -b');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(2);
          expect(result[0]).toBeDefined();
          expect(result[0]).toBe('-v');
          expect(result[1]).toBeDefined();
          expect(result[1]).toBe('-b');
          result = splicersplitter.splitAndSquashToArray(' ', '     ');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(0);
          result = splicersplitter.splitAndSquashToArray(' ');
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          return expect(_.size(result)).toBe(0);
        });
      });
      return it('joins the array into a string', function() {
        return runs(function() {
          var result;
          result = splicersplitter.spliceAndSquash(['', ' ', ' -a ', '-b ', ' ', ' -c']);
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(result.length).toBe(8);
          expect(result).toBe('-a -b -c');
          result = result = splicersplitter.spliceAndSquash(['', ' ', '  ', ' ', ' ', '']);
          expect(result).toBeDefined();
          expect(result.length).toBe(0);
          expect(result).toBe('');
          result = result = splicersplitter.spliceAndSquash([]);
          expect(result).toBeDefined();
          expect(result.length).toBe(0);
          expect(result).toBe('');
          result = result = splicersplitter.spliceAndSquash();
          expect(result).toBeDefined();
          expect(result.length).toBe(0);
          return expect(result).toBe('');
        });
      });
    });
    return describe('when working with delimited text', function() {
      return it('splits the text into an array', function() {
        return runs(function() {
          var result;
          result = splicersplitter.splitAndSquashToArray(path.delimiter, path.delimiter + ' -v ' + path.delimiter + ' -b' + path.delimiter);
          expect(result).toBeDefined();
          expect(result).toBeTruthy();
          expect(_.size(result)).toBe(2);
          expect(result[0]).toBeDefined();
          expect(result[0]).toBe('-v');
          expect(result[1]).toBeDefined();
          return expect(result[1]).toBe('-b');
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvdmFncmFudC8uYXRvbS9wYWNrYWdlcy9nby1wbHVzL3NwZWMvdXRpbC9zcGxpY2Vyc3BsaXR0ZXItc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsd0JBQUE7O0FBQUEsRUFBQSxDQUFBLEdBQUksT0FBQSxDQUFRLGlCQUFSLENBQUosQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQURQLENBQUE7O0FBQUEsRUFFQSxlQUFBLEdBQWtCLE9BQUEsQ0FBUSxrQ0FBUixDQUZsQixDQUFBOztBQUFBLEVBSUEsUUFBQSxDQUFTLGlCQUFULEVBQTRCLFNBQUEsR0FBQTtBQUMxQixRQUFBLGVBQUE7QUFBQSxJQUFDLGtCQUFtQixLQUFwQixDQUFBO0FBQUEsSUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO2FBQ1QsZUFBQSxHQUFzQixJQUFBLGVBQUEsQ0FBQSxFQURiO0lBQUEsQ0FBWCxDQUZBLENBQUE7QUFBQSxJQUtBLFFBQUEsQ0FBUyx3Q0FBVCxFQUFtRCxTQUFBLEdBQUE7QUFFakQsTUFBQSxFQUFBLENBQUcsK0JBQUgsRUFBb0MsU0FBQSxHQUFBO2VBQ2xDLElBQUEsQ0FBSyxTQUFBLEdBQUE7QUFDSCxjQUFBLE1BQUE7QUFBQSxVQUFBLE1BQUEsR0FBUyxlQUFlLENBQUMscUJBQWhCLENBQXNDLEdBQXRDLEVBQTJDLFNBQTNDLENBQVQsQ0FBQTtBQUFBLFVBQ0EsTUFBQSxDQUFPLE1BQVAsQ0FBYyxDQUFDLFdBQWYsQ0FBQSxDQURBLENBQUE7QUFBQSxVQUVBLE1BQUEsQ0FBTyxNQUFQLENBQWMsQ0FBQyxVQUFmLENBQUEsQ0FGQSxDQUFBO0FBQUEsVUFHQSxNQUFBLENBQU8sQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFQLENBQVAsQ0FBc0IsQ0FBQyxJQUF2QixDQUE0QixD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

//# sourceURL=/home/vagrant/.atom/packages/go-plus/spec/util/splicersplitter-spec.coffee
